import streamlit as st
from os.path import join, dirname
from dotenv import load_dotenv

from audio_transcriber import AudioTranscriber
from video_downloader import VideoDownloader
from sub_analyse_ai import analyze_content


def seconds_to_timestamp(seconds):
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    return f"{hours:02d}:{minutes:02d}:{secs:02d}"


dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)

st.title("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å YouTube")

video_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube:")
interval = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):",
                     min_value=5, max_value=30, value=15, step=5)
upload_button = st.button("–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É", type="primary")

if upload_button:
    if video_url:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        with st.spinner("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ..."):
            try:
                downloader = VideoDownloader(video_url)
                audio_path = downloader.download_video()
                st.success("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
                st.stop()

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        with st.spinner("–ü—Ä–µ–æ–±—Ä–∞–∑—É—é –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç..."):
            try:
                transcriber = AudioTranscriber(audio_path, interval)
                transcription_result = transcriber.transcribe_audio()
                st.success("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                st.stop()

        # –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ñ–∞–π–ª
        with open('downloads/sub.txt', 'w', encoding='utf-8') as f1:
            full_transcript = ""
            for entry in transcription_result:
                start_time, end_time = entry['timestamp']
                text = entry['text']
                start_formatted = seconds_to_timestamp(start_time)
                end_formatted = seconds_to_timestamp(end_time)
                line = f"({start_formatted}-{end_formatted}): {text}\n"
                f1.write(line)
                full_transcript += line

        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ..."):
            try:
                topics, timestamps = analyze_content(full_transcript)
                st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
                st.stop()

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tab1, tab2 = st.tabs(["‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏", "üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"])

        with tab1:
            st.header("‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏")
            for item in sorted(timestamps, key=lambda x: x['timestamp']):
                with st.expander(f"üïí {item['timestamp']} - {item['topic_name']}", expanded=True):
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** _{item['description']}_")
                    st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{item['tag']}`")

        with tab2:
            st.header("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è")
            for entry in transcription_result:
                start_time, end_time = entry['timestamp']
                text = entry['text']
                start_formatted = seconds_to_timestamp(start_time)
                end_formatted = seconds_to_timestamp(end_time)
                st.markdown(f"**({start_formatted}-{end_formatted}):** {text}")

    else:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
